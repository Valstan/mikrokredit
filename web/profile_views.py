"""
–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü—Ä–æ—Ñ–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, Telegram –ø—Ä–∏–≤—è–∑–∫–∞
"""
from flask import Blueprint, render_template, request, redirect, url_for, flash, session
from app.auth import login_required, get_current_user, update_user_password, is_valid_email, is_strong_password
from app.db_sa import get_session
from app.models_sa import UserORM
from datetime import datetime

bp = Blueprint('profile', __name__, url_prefix='/profile')


@bp.route('/')
@login_required
def index():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    user = get_current_user()
    return render_template('profile/index.html', user=user)


@bp.route('/edit', methods=['GET', 'POST'])
@login_required
def edit():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user = get_current_user()
    
    if request.method == 'POST':
        full_name = request.form.get('full_name', '').strip()
        phone = request.form.get('phone', '').strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        with get_session() as db:
            db_user = db.query(UserORM).filter_by(id=user.id).first()
            if db_user:
                db_user.full_name = full_name if full_name else None
                db_user.phone = phone if phone else None
                db_user.updated_at = datetime.now().isoformat()
                db.flush()
        
        flash('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
        return redirect(url_for('profile.index'))
    
    return render_template('profile/edit.html', user=user)


@bp.route('/change-email', methods=['GET', 'POST'])
@login_required
def change_email():
    """–°–º–µ–Ω–∞ email –∞–¥—Ä–µ—Å–∞"""
    user = get_current_user()
    
    if request.method == 'POST':
        new_email = request.form.get('new_email', '').strip().lower()
        password = request.form.get('password', '')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not new_email or not password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'danger')
            return render_template('profile/change_email.html', user=user)
        
        if not is_valid_email(new_email):
            flash('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å', 'danger')
            return render_template('profile/change_email.html', user=user)
        
        if new_email == user.email:
            flash('–ù–æ–≤—ã–π email —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º', 'warning')
            return redirect(url_for('profile.index'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        from app.auth import authenticate_user, generate_verification_token
        from app.email_service import email_service
        
        user_id = authenticate_user(user.email, password)
        if not user_id:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'danger')
            return render_template('profile/change_email.html', user=user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email
        from app.auth import get_user_by_email
        existing = get_user_by_email(new_email)
        if existing:
            flash('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'danger')
            return render_template('profile/change_email.html', user=user)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º email –≤ –ë–î
        old_email = user.email
        with get_session() as db:
            db_user = db.query(UserORM).filter_by(id=user.id).first()
            if db_user:
                db_user.email = new_email
                db_user.email_verified = False
                db_user.email_verified_at = None
                db_user.updated_at = datetime.now().isoformat()
                db.commit()  # –°—Ä–∞–∑—É –∫–æ–º–º–∏—Ç–∏–º
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
        token = generate_verification_token(user.id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            from app import audit_log
            audit_log.log_security_event('EMAIL_CHANGED', f'user_id={user.id}, old={old_email}, new={new_email}')
        except Exception as e:
            print(f"‚ö†Ô∏è  Audit log error: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å timeout 5 —Å–µ–∫—É–Ω–¥ –≤–Ω—É—Ç—Ä–∏)
        if email_service.enabled:
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ {new_email}...")
                email_sent = email_service.send_verification_email(new_email, user.full_name or new_email, token)
                if email_sent:
                    print(f"‚úÖ –ü–∏—Å—å–º–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {new_email}")
                else:
                    print(f"‚ö†Ô∏è  –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
                import traceback
                traceback.print_exc()
        
        flash(f'Email –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_email}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞.', 'success')
        return redirect(url_for('profile.index'))
    
    return render_template('profile/change_email.html', user=user)


@bp.route('/change-password', methods=['GET', 'POST'])
@login_required
def change_password():
    """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"""
    if request.method == 'POST':
        current_password = request.form.get('current_password', '')
        new_password = request.form.get('new_password', '')
        confirm_password = request.form.get('confirm_password', '')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not current_password or not new_password:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'danger')
            return render_template('profile/change_password.html')
        
        if new_password != confirm_password:
            flash('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'danger')
            return render_template('profile/change_password.html')
        
        is_strong, error = is_strong_password(new_password)
        if not is_strong:
            flash(error, 'danger')
            return render_template('profile/change_password.html')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        from app.auth import authenticate_user
        user = get_current_user()
        user_id = authenticate_user(user.email, current_password)
        
        if not user_id:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'danger')
            return render_template('profile/change_password.html')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        success = update_user_password(user.id, new_password)
        
        if success:
            flash('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success')
            return redirect(url_for('profile.index'))
        else:
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è', 'danger')
    
    return render_template('profile/change_password.html')


@bp.route('/security')
@login_required
def security():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    user = get_current_user()
    return render_template('profile/security.html', user=user)


@bp.route('/notifications', methods=['GET', 'POST'])
@login_required
def notifications():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–≤—è–∑–∫–∞ Telegram"""
    user = get_current_user()
    
    if request.method == 'POST':
        action = request.form.get('action')
        
        if action == 'update_settings':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            email_notifications = request.form.get('email_notifications') == 'on'
            telegram_notifications = request.form.get('telegram_notifications') == 'on'
            
            with get_session() as db:
                db_user = db.query(UserORM).filter_by(id=user.id).first()
                if db_user:
                    db_user.email_notifications = email_notifications
                    db_user.telegram_notifications = telegram_notifications
                    db_user.updated_at = datetime.now().isoformat()
                    db.flush()
            
            flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
            
        elif action == 'generate_code':
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
            from app.telegram_auth import generate_link_code
            code = generate_link_code(user.id)
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–æ–¥–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
            return redirect(url_for('profile.notifications', code=code))
        
        elif action == 'unlink_telegram':
            # –û—Ç–≤—è–∑–∫–∞ Telegram
            with get_session() as db:
                db_user = db.query(UserORM).filter_by(id=user.id).first()
                if db_user:
                    db_user.telegram_chat_id = None
                    db_user.telegram_username = None
                    db_user.updated_at = datetime.now().isoformat()
                    db.flush()
            
            flash('Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω', 'success')
        
        return redirect(url_for('profile.notifications'))
    
    return render_template('profile/notifications.html', user=user)


@bp.route('/delete-account', methods=['POST'])
@login_required
def delete_account():
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = get_current_user()
    password = request.form.get('password', '')
    
    if not password:
        flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', 'danger')
        return redirect(url_for('profile.security'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    from app.auth import authenticate_user
    user_id = authenticate_user(user.email, password)
    
    if not user_id:
        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', 'danger')
        return redirect(url_for('profile.security'))
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (CASCADE —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    with get_session() as db:
        db_user = db.query(UserORM).filter_by(id=user.id).first()
        if db_user:
            db.delete(db_user)
            db.flush()
    
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    session.clear()
    flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!', 'info')
    return redirect(url_for('auth.login'))

