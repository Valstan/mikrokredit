#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–¥–∞—á–∞—Ö
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ "–í—ã–ø–æ–ª–Ω–∏–ª" –∏ "–û—Ç–ª–æ–∂–∏—Ç—å"
"""

import sys
import os
from datetime import datetime, time as dt_time, timedelta
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from app.db_sa import get_session
from app.models_sa import TaskORM, TaskReminderORM
from sqlalchemy import select

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "489021673:AAH7QDGmqzOMgT0W_wINvzWC1ihfljuFAKI"
TELEGRAM_CHAT_ID = 352096813

# –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (MSK)
BOT_WORK_HOURS_START = 7   # 7:00
BOT_WORK_HOURS_END = 22     # 22:00


def is_work_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (7:00 - 22:00 MSK)"""
    now = datetime.now()
    current_hour = now.hour
    return BOT_WORK_HOURS_START <= current_hour < BOT_WORK_HOURS_END


def get_pending_reminders():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"""
    if not is_work_hours():
        return []
    
    reminders = []
    now = datetime.now()
    
    with get_session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
        pending = session.execute(
            select(TaskReminderORM)
            .where(
                TaskReminderORM.sent == 0,
                TaskReminderORM.reminder_time <= now.isoformat()
            )
        ).scalars().all()
        
        for reminder in pending:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á—É
            task = session.get(TaskORM, reminder.task_id)
            if task and task.status == 0:  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
                reminders.append({
                    'reminder_id': reminder.id,
                    'task_id': task.id,
                    'task_title': task.title,
                    'task_description': task.description,
                    'importance': task.importance,
                    'due_date': task.due_date
                })
    
    return reminders


def format_task_message(task_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ"""
    importance_emoji = {
        1: "üî¥",
        2: "üü°",
        3: "‚ö™"
    }
    
    importance_text = {
        1: "–í–∞–∂–Ω–∞—è",
        2: "–ù—É–∂–Ω–∞—è",
        3: "–•–æ—Ç–µ–ª–æ—Å—å –±—ã"
    }
    
    emoji = importance_emoji.get(task_data['importance'], "‚ö™")
    imp_text = importance_text.get(task_data['importance'], "")
    
    message = f"{emoji} <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–î–ê–ß–ï</b>\n\n"
    message += f"<b>{task_data['task_title']}</b>\n"
    
    if task_data.get('task_description'):
        desc = task_data['task_description']
        if len(desc) > 200:
            desc = desc[:200] + "..."
        message += f"\n{desc}\n"
    
    message += f"\nüìå –í–∞–∂–Ω–æ—Å—Ç—å: {imp_text}"
    
    if task_data.get('due_date'):
        message += f"\nüìÖ –°—Ä–æ–∫: {task_data['due_date'][:16]}"
    
    return message


def create_task_keyboard(task_id: int, reminder_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"task_complete_{task_id}_{reminder_id}"),
            InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"task_postpone_{task_id}_{reminder_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    parts = data.split('_')
    
    if data.startswith('task_complete_'):
        # –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        task_id = int(parts[2])
        reminder_id = int(parts[3])
        
        with get_session() as session:
            task = session.get(TaskORM, task_id)
            if task:
                task.status = 1
                task.completed_at = datetime.now().isoformat()
                task.updated_at = datetime.now().isoformat()
                
                # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                reminder = session.get(TaskReminderORM, reminder_id)
                if reminder:
                    reminder.acknowledged = 1
                    reminder.acknowledged_at = datetime.now().isoformat()
                
                session.commit()
                
                await query.edit_message_text(
                    text=f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n<b>{task.title}</b>\n\n<i>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ</i>",
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    elif data.startswith('task_postpone_'):
        # –û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É - –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        task_id = int(parts[2])
        reminder_id = int(parts[3])
        
        with get_session() as session:
            reminder = session.get(TaskReminderORM, reminder_id)
            if reminder:
                reminder.acknowledged = 1
                reminder.acknowledged_at = datetime.now().isoformat()
                session.commit()
        
        # URL –∫ –∑–∞–¥–∞—á–µ
        task_url = f"http://73269587c9af.vps.myjino.ru/tasks/{task_id}"
        
        await query.edit_message_text(
            text=f"‚è∞ –ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n{task_url}",
            parse_mode='HTML'
        )


async def send_task_reminder(reminder_data: dict, app: Application):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ"""
    message_text = format_task_message(reminder_data)
    keyboard = create_task_keyboard(reminder_data['task_id'], reminder_data['reminder_id'])
    
    try:
        message = await app.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        with get_session() as session:
            reminder = session.get(TaskReminderORM, reminder_data['reminder_id'])
            if reminder:
                reminder.sent = 1
                reminder.sent_at = datetime.now().isoformat()
                reminder.telegram_message_id = message.message_id
                session.commit()
        
        print(f"‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ: {reminder_data['task_title']}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False


async def check_and_send_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ pending –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    if not is_work_hours():
        print(f"–í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ ({BOT_WORK_HOURS_START}:00 - {BOT_WORK_HOURS_END}:00 MSK)")
        return
    
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    reminders = get_pending_reminders()
    print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(reminders)}")
    
    if not reminders:
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    await app.initialize()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for reminder in reminders:
        await send_task_reminder(reminder, app)
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    await app.shutdown()
    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        asyncio.run(check_and_send_reminders())
        return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())

