#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É loans
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from app.secrets import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD

def main():
    import psycopg2
    
    print("üîß –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ loans")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    
    try:
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ø–æ–ª—è
        cur.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'loans' 
            AND column_name IN ('loan_type', 'category', 'interest_rate')
        """)
        existing_columns = [row[0] for row in cur.fetchall()]
        
        if len(existing_columns) == 3:
            print("‚úì –í—Å–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π: {len(existing_columns)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º loan_type
        if 'loan_type' not in existing_columns:
            print("  –î–æ–±–∞–≤–ª—è–µ–º loan_type...")
            cur.execute("""
                ALTER TABLE loans 
                ADD COLUMN IF NOT EXISTS loan_type VARCHAR(50) DEFAULT 'single'
            """)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ installments
            cur.execute("""
                UPDATE loans 
                SET loan_type = CASE 
                    WHEN (SELECT COUNT(*) FROM installments WHERE loan_id = loans.id) > 0 
                    THEN 'installment' 
                    ELSE 'single' 
                END
            """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º category
        if 'category' not in existing_columns:
            print("  –î–æ–±–∞–≤–ª—è–µ–º category...")
            cur.execute("""
                ALTER TABLE loans 
                ADD COLUMN IF NOT EXISTS category VARCHAR(50) DEFAULT 'microloan'
            """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º interest_rate
        if 'interest_rate' not in existing_columns:
            print("  –î–æ–±–∞–≤–ª—è–µ–º interest_rate...")
            cur.execute("""
                ALTER TABLE loans 
                ADD COLUMN IF NOT EXISTS interest_rate FLOAT DEFAULT 0.0
            """)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–π–º–æ–≤
            cur.execute("""
                UPDATE loans 
                SET interest_rate = CASE 
                    WHEN amount_borrowed > 0 
                    THEN ROUND(((amount_due - amount_borrowed) / amount_borrowed * 100)::numeric, 2)
                    ELSE 0 
                END
                WHERE interest_rate = 0 OR interest_rate IS NULL
            """)
        
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cur.execute("SELECT COUNT(*) FROM loans")
        total = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM loans WHERE loan_type = 'installment'")
        installment_count = cur.fetchone()[0]
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–π–º–æ–≤: {total}")
        print(f"  –° —Ä–∞—Å—Å—Ä–æ—á–∫–æ–π: {installment_count}")
        print(f"  –†–∞–∑–æ–≤—ã—Ö: {total - installment_count}")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        conn.close()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

