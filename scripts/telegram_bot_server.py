#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫
–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
"""

import sys
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.db_sa import get_session
from app.models_sa import TaskORM, TaskReminderORM
from sqlalchemy import select

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "489021673:AAH7QDGmqzOMgT0W_wINvzWC1ihfljuFAKI"
WEB_URL = "http://73269587c9af.vps.myjino.ru"
BOT_WORK_HOURS_START = 7
BOT_WORK_HOURS_END = 22


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    log_msg = f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω callback: {data}"
    print(log_msg)
    
    try:
        parts = data.split('_')
        print(f"[{datetime.now()}] –†–∞–∑–±–æ—Ä callback: {parts}")
        
        if data.startswith('task_complete_'):
            # –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            task_id = int(parts[2])
            reminder_id = int(parts[3])
            print(f"[{datetime.now()}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")
            
            with get_session() as session:
                task = session.get(TaskORM, task_id)
                if task:
                    task.status = 1
                    task.completed_at = datetime.now().isoformat()
                    task.updated_at = datetime.now().isoformat()
                    
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    reminder = session.get(TaskReminderORM, reminder_id)
                    if reminder:
                        reminder.acknowledged = 1
                        reminder.acknowledged_at = datetime.now().isoformat()
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
                    future_reminders = session.execute(
                        select(TaskReminderORM).where(
                            TaskReminderORM.task_id == task_id,
                            TaskReminderORM.sent == 0
                        )
                    ).scalars().all()
                    
                    for fr in future_reminders:
                        session.delete(fr)
                    
                    session.commit()
                    
                    await query.edit_message_text(
                        text=f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n{task.title}\n\n<i>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ</i>",
                        parse_mode='HTML'
                    )
                    print(f"‚úì –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
                else:
                    await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        elif data.startswith('task_postpone_'):
            # –û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É - –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            task_id = int(parts[2])
            reminder_id = int(parts[3])
            
            with get_session() as session:
                reminder = session.get(TaskReminderORM, reminder_id)
                if reminder:
                    reminder.acknowledged = 1
                    reminder.acknowledged_at = datetime.now().isoformat()
                    session.commit()
            
            # URL –∫ –∑–∞–¥–∞—á–µ
            task_url = f"{WEB_URL}/tasks/{task_id}"
            
            await query.edit_message_text(
                text=f"‚è∞ <b>–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞</b>\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n{task_url}",
                parse_mode='HTML'
            )
            print(f"‚úì –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–ª–æ–∂–µ–Ω–∞")
    
    except Exception as e:
        error_msg = f"[{datetime.now()}] –û–®–ò–ë–ö–ê callback: {e}"
        print(error_msg)
        import traceback
        traceback.print_exc()
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"–¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:20]}...")
    print(f"–†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {BOT_WORK_HOURS_START}:00 - {BOT_WORK_HOURS_END}:00 MSK")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    print("‚úì –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç callback...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚úì –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

