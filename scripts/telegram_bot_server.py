#!/usr/bin/env python3
"""
Telegram –±–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫
–†–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
"""

import sys
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from app.db_sa import get_session
from app.models_sa import TaskORM, TaskReminderORM, UserORM
from app.secrets import TELEGRAM_BOT_TOKEN, WEB_URL, BOT_WORK_HOURS_START, BOT_WORK_HOURS_END
from app.telegram_auth import verify_link_code, link_telegram_account, get_user_by_telegram_chat_id
from sqlalchemy import select

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = TELEGRAM_BOT_TOKEN


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    log_msg = f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω callback: {data}"
    print(log_msg)
    
    try:
        parts = data.split('_')
        print(f"[{datetime.now()}] –†–∞–∑–±–æ—Ä callback: {parts}")
        
        if data.startswith('task_complete_'):
            # –ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            task_id = int(parts[2])
            reminder_id = int(parts[3])
            print(f"[{datetime.now()}] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id}")
            
            with get_session() as session:
                task = session.get(TaskORM, task_id)
                if task:
                    task.status = 1
                    task.completed_at = datetime.now().isoformat()
                    task.updated_at = datetime.now().isoformat()
                    
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    reminder = session.get(TaskReminderORM, reminder_id)
                    if reminder:
                        reminder.acknowledged = 1
                        reminder.acknowledged_at = datetime.now().isoformat()
                    
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
                    future_reminders = session.execute(
                        select(TaskReminderORM).where(
                            TaskReminderORM.task_id == task_id,
                            TaskReminderORM.sent == 0
                        )
                    ).scalars().all()
                    
                    for fr in future_reminders:
                        session.delete(fr)
                    
                    session.commit()
                    
                    await query.edit_message_text(
                        text=f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n{task.title}\n\n<i>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ</i>",
                        parse_mode='HTML'
                    )
                    print(f"‚úì –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
                else:
                    await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        elif data.startswith('task_postpone_'):
            # –û—Ç–ª–æ–∂–∏—Ç—å –∑–∞–¥–∞—á—É - –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            task_id = int(parts[2])
            reminder_id = int(parts[3])
            
            with get_session() as session:
                reminder = session.get(TaskReminderORM, reminder_id)
                if reminder:
                    reminder.acknowledged = 1
                    reminder.acknowledged_at = datetime.now().isoformat()
                    session.commit()
            
            # URL –∫ –∑–∞–¥–∞—á–µ
            task_url = f"{WEB_URL}/tasks/{task_id}"
            
            await query.edit_message_text(
                text=f"‚è∞ <b>–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞</b>\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n{task_url}",
                parse_mode='HTML'
            )
            print(f"‚úì –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–ª–æ–∂–µ–Ω–∞")
    
    except Exception as e:
        error_msg = f"[{datetime.now()}] –û–®–ò–ë–ö–ê callback: {e}"
        print(error_msg)
        import traceback
        traceback.print_exc()
        await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:100]}")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = str(update.effective_chat.id)
    username = update.effective_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
    if context.args and len(context.args) > 0:
        code = context.args[0]
        print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: {code} –æ—Ç chat_id: {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        user_id = verify_link_code(code)
        
        if user_id:
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success = link_telegram_account(user_id, chat_id, username)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                with get_session() as session:
                    user = session.get(UserORM, user_id)
                    user_name = user.full_name or user.email if user else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                await update.message.reply_text(
                    f"‚úÖ <b>Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                    f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {user_name}\n"
                    f"üí¨ –í–∞—à Telegram: @{username or 'ID: ' + chat_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–π–º–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö –ø—Ä—è–º–æ –≤ Telegram!\n\n"
                    f"üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    f"/myaccount - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                    f"/help - —Å–ø—Ä–∞–≤–∫–∞",
                    parse_mode='HTML'
                )
                print(f"‚úì –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω user_id {user_id} –∫ chat_id {chat_id}")
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥."
                )
        else:
            await update.message.reply_text(
                "‚ùå <b>–ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫</b>\n\n"
                "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ 10 –º–∏–Ω—É—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:\n"
                f"{WEB_URL}/profile/notifications",
                parse_mode='HTML'
            )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_id = get_user_by_telegram_chat_id(chat_id)
        
        if user_id:
            # –£–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            with get_session() as session:
                user = session.get(UserORM, user_id)
                user_name = user.full_name or user.email if user else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            await update.message.reply_text(
                f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user_name}!</b>\n\n"
                f"–í–∞—à Telegram —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∏—Å—Ç–µ–º–µ –ú–∏–∫—Ä–æ–ö—Ä–µ–¥–∏—Ç.\n\n"
                f"üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/myaccount - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                f"/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {WEB_URL}",
                parse_mode='HTML'
            )
        else:
            # –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω
            await update.message.reply_text(
                f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏–∫—Ä–æ–ö—Ä–µ–¥–∏—Ç –±–æ—Ç!</b>\n\n"
                f"–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–π–º–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.\n\n"
                f"üîó <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                f"1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ: {WEB_URL}\n"
                f"2. –ó–∞–π–¥–∏—Ç–µ –≤ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                f"3. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram'\n"
                f"4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–∞–Ω–¥–æ–π:\n"
                f"   <code>/start [–≤–∞—à_–∫–æ–¥]</code>\n\n"
                f"üì± –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
                f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–π–º–∞—Ö\n"
                f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö\n"
                f"‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                parse_mode='HTML'
            )


async def myaccount_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myaccount"""
    chat_id = str(update.effective_chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ chat_id
    user_id = get_user_by_telegram_chat_id(chat_id)
    
    if not user_id:
        await update.message.reply_text(
            "‚ùå <b>Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
            f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å –∫–æ–¥–æ–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n"
            f"{WEB_URL}/profile/notifications",
            parse_mode='HTML'
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with get_session() as session:
        user = session.get(UserORM, user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        from app.models_sa import LoanORM, TaskORM
        from sqlalchemy import func
        
        loans_count = session.query(func.count(LoanORM.id)).filter_by(user_id=user_id).scalar() or 0
        tasks_count = session.query(func.count(TaskORM.id)).filter_by(user_id=user_id).scalar() or 0
        tasks_pending = session.query(func.count(TaskORM.id)).filter_by(user_id=user_id, status=0).scalar() or 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        message = f"üë§ <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        message += f"üìß Email: {user.email}\n"
        message += f"üë§ –ò–º—è: {user.full_name or '‚Äî'}\n"
        message += f"üí¨ Telegram: @{user.telegram_username or 'ID: ' + chat_id}\n"
        message += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at[:10]}\n\n"
        message += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        message += f"üí≥ –ó–∞–π–º–æ–≤: {loans_count}\n"
        message += f"‚úÖ –ó–∞–¥–∞—á: {tasks_count} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {tasks_pending})\n\n"
        message += f"üåê –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {WEB_URL}/profile\n\n"
        message += f"üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
        message += f"Email: {'‚úÖ' if user.email_notifications else '‚ùå'}\n"
        message += f"Telegram: {'‚úÖ' if user.telegram_notifications else '‚ùå'}"
        
        await update.message.reply_text(message, parse_mode='HTML')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    message = (
        "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start [–∫–æ–¥] - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n"
        "/myaccount - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {WEB_URL}\n\n"
        "üí° <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–π–º–∞—Ö\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–í—ã–ø–æ–ª–Ω–∏–ª/–û—Ç–ª–æ–∂–∏—Ç—å)"
    )
    
    await update.message.reply_text(message, parse_mode='HTML')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"–¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:20]}...")
    print(f"–†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {BOT_WORK_HOURS_START}:00 - {BOT_WORK_HOURS_END}:00 MSK")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("myaccount", myaccount_command))
    app.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    print("‚úì –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ callback...")
    print("‚úì –ö–æ–º–∞–Ω–¥—ã: /start, /myaccount, /help")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚úì –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        sys.exit(0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

