#!/usr/bin/env python3
"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞—Ö
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–π–º–∞—Ö —Å–æ —Å—Ä–æ–∫–æ–º –æ–ø–ª–∞—Ç—ã <= 2 –¥–Ω–µ–π
"""

import sys
import os
from datetime import date, timedelta
import requests
from typing import List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from app.db_sa import get_session
from app.models_sa import LoanORM, InstallmentORM
from sqlalchemy import select, func

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_TOKEN = "489021673:AAH7QDGmqzOMgT0W_wINvzWC1ihfljuFAKI"
TELEGRAM_CHAT_ID = "352096813"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
DAYS_BEFORE_DUE = 2  # –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ 2 –¥–Ω—è –∏ –º–µ–Ω–µ–µ


def send_telegram_message(text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        payload = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': False
        }
        response = requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def get_urgent_loans() -> List[dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [{'org_name': ..., 'website': ..., 'due_date': ..., 'amount': ..., 'days_left': ...}, ...]
    """
    urgent_loans = []
    today = date.today()
    threshold_date = today + timedelta(days=DAYS_BEFORE_DUE)
    
    with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–π–º—ã
        loans = session.execute(
            select(LoanORM).where(LoanORM.is_paid == 0)
        ).scalars().all()
        
        for loan in loans:
            # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
            loan_data = {
                'id': loan.id,
                'org_name': loan.org_name,
                'website': loan.website,
                'amount_due': loan.amount_due,
                'due_date': loan.due_date
            }
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            next_payment = session.execute(
                select(InstallmentORM)
                .where(
                    InstallmentORM.loan_id == loan.id,
                    InstallmentORM.paid == 0
                )
                .order_by(InstallmentORM.due_date.asc())
                .limit(1)
            ).scalar_one_or_none()
            
            if next_payment:
                # –ï—Å—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ
                try:
                    payment_date = date.fromisoformat(next_payment.due_date)
                    days_left = (payment_date - today).days
                    
                    if days_left <= DAYS_BEFORE_DUE:
                        urgent_loans.append({
                            'org_name': loan_data['org_name'],
                            'website': loan_data['website'],
                            'due_date': next_payment.due_date,
                            'amount': next_payment.amount,
                            'days_left': days_left
                        })
                except ValueError:
                    pass  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            else:
                # –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ä–æ–∫
                try:
                    loan_due_date = date.fromisoformat(loan_data['due_date'])
                    days_left = (loan_due_date - today).days
                    
                    if days_left <= DAYS_BEFORE_DUE and loan_data['amount_due'] > 0:
                        urgent_loans.append({
                            'org_name': loan_data['org_name'],
                            'website': loan_data['website'],
                            'due_date': loan_data['due_date'],
                            'amount': loan_data['amount_due'],
                            'days_left': days_left
                        })
                except ValueError:
                    pass  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
    urgent_loans.sort(key=lambda x: x['days_left'])
    return urgent_loans


def format_message(urgent_loans: List[dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    if not urgent_loans:
        return "üü¢ <b>–ì–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ—Ç!</b>\n\n–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚úÖ"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    total_amount = sum(loan['amount'] for loan in urgent_loans)
    message = f"üî• <b>–ì–û–†–Ø–©–ò–ï –ö–†–ï–î–ò–¢–´</b> üî•\n\n"
    message += f"üìä –í—Å–µ–≥–æ: <b>{len(urgent_loans)}</b> –∫—Ä–µ–¥–∏—Ç(–æ–≤)\n"
    message += f"üí∞ –°—É–º–º–∞: <b>{total_amount:,.2f} ‚ÇΩ</b>\n"
    message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤
    for loan in urgent_loans:
        due_date = loan['due_date']
        amount = loan['amount']
        days_left = loan['days_left']
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if days_left < 0:
            urgency = "üî¥ –ü–†–û–°–†–û–ß–ï–ù"
            days_text = f"({abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥)"
        elif days_left == 0:
            urgency = "üî¥ –°–ï–ì–û–î–ù–Ø"
            days_text = ""
        elif days_left == 1:
            urgency = "üü† –ó–ê–í–¢–†–ê"
            days_text = ""
        else:
            urgency = "üü°"
            days_text = f"(—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        org_name = loan['org_name'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        message += f"{urgency} <b>{org_name}</b> {days_text}\n"
        message += f"üí≥ –°—É–º–º–∞: <b>{amount:,.2f} ‚ÇΩ</b>\n"
        message += f"üìÖ –°—Ä–æ–∫: {due_date}\n"
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç
        if loan['website']:
            message += f"üîó <a href=\"{loan['website']}\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>\n"
        
        message += "\n"
    
    # –§—É—Ç–µ—Ä
    message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    message += "‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–æ–≤—Ä–µ–º—è!"
    
    return message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"[{date.today()} {__import__('datetime').datetime.now().strftime('%H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
    urgent_loans = get_urgent_loans()
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—â–∏—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤: {len(urgent_loans)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = format_message(urgent_loans)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if send_telegram_message(message):
        print("‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        return 0
    else:
        print("‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return 1


if __name__ == "__main__":
    sys.exit(main())

