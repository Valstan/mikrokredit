#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
2. –°–æ–∑–¥–∞–µ—Ç admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ AUTH_PASSWORD
3. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
4. –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è admin
"""

import sys
import os
from datetime import datetime
from getpass import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, PROJECT_ROOT)

from sqlalchemy import text
from app.db_sa import engine, get_session
from app.models_sa import Base, UserORM, LoanORM, TaskORM, TaskCategoryORM


def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


def check_existing_admin():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with get_session() as session:
        admin = session.query(UserORM).filter_by(email='admin@mikrokredit.local').first()
        return admin


def create_admin_user(email: str, password: str, full_name: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    import bcrypt
    
    print(f"\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
    
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    now = datetime.now().isoformat()
    
    with get_session() as session:
        admin = UserORM(
            email=email,
            username='admin',
            password_hash=password_hash,
            full_name=full_name,
            is_active=True,
            is_admin=True,
            email_verified=True,
            email_verified_at=now,
            email_notifications=True,
            telegram_notifications=True,
            created_at=now,
            updated_at=now,
        )
        session.add(admin)
        session.flush()
        admin_id = admin.id
        
    print(f"‚úÖ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {admin_id}")
    return admin_id


def migrate_loans(admin_id: int):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–π–º–æ–≤ –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ user_id –∫–æ–ª–æ–Ω–∫–∞
        result = session.execute(text(
            "SELECT column_name FROM information_schema.columns "
            "WHERE table_name='loans' AND column_name='user_id'"
        ))
        has_user_id = result.fetchone() is not None
        
        if not has_user_id:
            print("\nüí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ user_id –≤ —Ç–∞–±–ª–∏—Ü—É loans...")
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º nullable
            session.execute(text(
                f"ALTER TABLE loans ADD COLUMN user_id INTEGER"
            ))
            session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        session.execute(text(
            f"UPDATE loans SET user_id = {admin_id} WHERE user_id IS NULL"
        ))
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º constraint –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not has_user_id:
            session.execute(text(
                "ALTER TABLE loans ALTER COLUMN user_id SET NOT NULL"
            ))
            session.execute(text(
                f"ALTER TABLE loans ADD CONSTRAINT fk_loans_user_id "
                f"FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE"
            ))
            session.execute(text(
                "CREATE INDEX ix_loans_user_id ON loans(user_id)"
            ))
            session.commit()
        
        count = session.execute(text("SELECT COUNT(*) FROM loans")).scalar()
        print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ {count} –∑–∞–π–º–æ–≤ –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


def migrate_task_categories(admin_id: int):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ user_id –∫–æ–ª–æ–Ω–∫–∞
        result = session.execute(text(
            "SELECT column_name FROM information_schema.columns "
            "WHERE table_name='task_categories' AND column_name='user_id'"
        ))
        has_user_id = result.fetchone() is not None
        
        if not has_user_id:
            print("\nüìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ user_id –≤ —Ç–∞–±–ª–∏—Ü—É task_categories...")
            session.execute(text(
                f"ALTER TABLE task_categories ADD COLUMN user_id INTEGER"
            ))
            session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        session.execute(text(
            f"UPDATE task_categories SET user_id = {admin_id} WHERE user_id IS NULL"
        ))
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º constraint –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not has_user_id:
            session.execute(text(
                "ALTER TABLE task_categories ALTER COLUMN user_id SET NOT NULL"
            ))
            session.execute(text(
                f"ALTER TABLE task_categories ADD CONSTRAINT fk_task_categories_user_id "
                f"FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE"
            ))
            session.execute(text(
                "CREATE INDEX ix_task_categories_user_id ON task_categories(user_id)"
            ))
            session.commit()
        
        count = session.execute(text("SELECT COUNT(*) FROM task_categories")).scalar()
        print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ {count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


def migrate_tasks(admin_id: int):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–¥–∞—á –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ user_id –∫–æ–ª–æ–Ω–∫–∞
        result = session.execute(text(
            "SELECT column_name FROM information_schema.columns "
            "WHERE table_name='tasks' AND column_name='user_id'"
        ))
        has_user_id = result.fetchone() is not None
        
        if not has_user_id:
            print("\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ user_id –≤ —Ç–∞–±–ª–∏—Ü—É tasks...")
            session.execute(text(
                f"ALTER TABLE tasks ADD COLUMN user_id INTEGER"
            ))
            session.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        session.execute(text(
            f"UPDATE tasks SET user_id = {admin_id} WHERE user_id IS NULL"
        ))
        session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º constraint –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not has_user_id:
            session.execute(text(
                "ALTER TABLE tasks ALTER COLUMN user_id SET NOT NULL"
            ))
            session.execute(text(
                f"ALTER TABLE tasks ADD CONSTRAINT fk_tasks_user_id "
                f"FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE"
            ))
            session.execute(text(
                "CREATE INDEX ix_tasks_user_id ON tasks(user_id)"
            ))
            session.commit()
        
        count = session.execute(text("SELECT COUNT(*) FROM tasks")).scalar()
        print(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω–æ {count} –∑–∞–¥–∞—á –∫ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


def main():
    print("=" * 60)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ö –ú–ù–û–ì–û–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ô –°–ò–°–¢–ï–ú–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ admin
    existing_admin = check_existing_admin()
    if existing_admin:
        print(f"\n‚ö†Ô∏è  Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_admin.email}")
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö? (y/n): ")
        if response.lower() != 'y':
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        admin_id = existing_admin.id
    else:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        create_tables()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è admin
        print("\n" + "=" * 60)
        print("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("=" * 60)
        
        email = input("Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ [admin@mikrokredit.local]: ").strip() or "admin@mikrokredit.local"
        full_name = input("–ü–æ–ª–Ω–æ–µ –∏–º—è [Administrator]: ").strip() or "Administrator"
        
        # –ü–∞—Ä–æ–ª—å
        print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ—Ç AUTH_PASSWORD –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        password = getpass("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ")
        password_confirm = getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        
        if password != password_confirm:
            print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return
        
        if len(password) < 8:
            print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        # –°–æ–∑–¥–∞–µ–º admin
        admin_id = create_admin_user(email, password, full_name)
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        migrate_loans(admin_id)
        migrate_task_categories(admin_id)
        migrate_tasks(admin_id)
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print(f"\nüìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {existing_admin.email if existing_admin else email}")
        print("üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
        print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        print("   cd /home/valstan/mikrokredit")
        print("   scripts/stop_service.sh")
        print("   scripts/start_service.sh")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)

