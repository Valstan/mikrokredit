"""
–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""
import requests
from typing import Optional
from datetime import datetime

from app.secrets import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID


class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str = None, chat_id: str = None):
        self.bot_token = bot_token or TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or TELEGRAM_CHAT_ID
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def send_message(self, text: str, parse_mode: str = "HTML") -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Returns:
            message_id –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
        """
        if not self.bot_token or not self.chat_id:
            print("‚ö†Ô∏è  Telegram credentials not configured")
            return None
        
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    return result["result"]["message_id"]
            else:
                print(f"‚ùå Telegram API error: {response.status_code}")
                print(response.text)
            
            return None
        
        except Exception as e:
            print(f"‚ùå Telegram send error: {e}")
            return None
    
    def send_task_reminder(
        self,
        task_title: str,
        task_id: int,
        reminder_type: str = "general"
    ) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
        
        Args:
            task_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            task_id: ID –∑–∞–¥–∞—á–∏
            reminder_type: –¢–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (before_start, before_end, etc)
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        icon = "üîî"
        type_text = ""
        
        if reminder_type == "before_start":
            icon = "‚è∞"
            type_text = "—Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è"
        elif reminder_type == "before_end":
            icon = "‚è±Ô∏è"
            type_text = "—Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è"
        elif reminder_type == "periodic_before":
            icon = "üîî"
            type_text = "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        elif reminder_type == "periodic_during":
            icon = "‚ñ∂Ô∏è"
            type_text = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        elif reminder_type == "after_end":
            icon = "‚úÖ"
            type_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        
        now = datetime.now().strftime("%H:%M")
        
        message = f"{icon} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</b>\n\n"
        message += f"üìã {task_title}\n"
        if type_text:
            message += f"‚ÑπÔ∏è {type_text}\n"
        message += f"üïê {now}\n"
        message += f"\n<a href='http://–≤–∞—à-–¥–æ–º–µ–Ω/tasks/{task_id}/edit/v2'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É</a>"
        
        return self.send_message(message)
    
    def send_loan_reminder(
        self,
        org_name: str,
        amount: float,
        date_str: str,
        days_left: int,
        loan_id: int
    ) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ –∑–∞–π–º—É
        
        Args:
            org_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            date_str: –î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
            days_left: –î–Ω–µ–π –¥–æ –ø–ª–∞—Ç–µ–∂–∞
            loan_id: ID –∑–∞–π–º–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        if days_left < 0:
            icon = "üî¥"
            urgency = "–ü–†–û–°–†–û–ß–ï–ù–û"
        elif days_left == 0:
            icon = "üî¥"
            urgency = "–°–ï–ì–û–î–ù–Ø"
        elif days_left == 1:
            icon = "üü†"
            urgency = "–ó–ê–í–¢–†–ê"
        elif days_left <= 2:
            icon = "üü°"
            urgency = f"—á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        elif days_left <= 5:
            icon = "üü°"
            urgency = f"—á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
        else:
            icon = "üîµ"
            urgency = f"—á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
        
        message = f"{icon} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ</b>\n\n"
        message += f"üè¶ {org_name}\n"
        message += f"üí∞ {amount:.2f} ‚ÇΩ\n"
        message += f"üìÖ {date_str}\n"
        message += f"‚è∞ {urgency}\n"
        message += f"\n<a href='http://–≤–∞—à-–¥–æ–º–µ–Ω/loan/{loan_id}/v2'>–û—Ç–∫—Ä—ã—Ç—å –∑–∞–π–º</a>"
        
        return self.send_message(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()


def send_task_reminder_notification(task_title: str, task_id: int, reminder_type: str = "general") -> bool:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    message_id = telegram_notifier.send_task_reminder(task_title, task_id, reminder_type)
    return message_id is not None


def send_loan_reminder_notification(
    org_name: str,
    amount: float,
    date_str: str,
    days_left: int,
    loan_id: int
) -> bool:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    message_id = telegram_notifier.send_loan_reminder(org_name, amount, date_str, days_left, loan_id)
    return message_id is not None

